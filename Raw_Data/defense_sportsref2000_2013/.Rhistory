class(game_logs_played$Week)
game_logs_played$Week <- as.character(game_logs_played$Week)
##update team acronym for Jacksonville so that it matches the acronym in the weather dataset
game_logs_played$Opponent[game_logs_played$Opponent %in% "JAC"] <- "JAX"
##convert team column to character
career$Team_2 <- as.character(career$Team)
##add a team acronym column so that it can be joined with other datasets
career$Team_2[career$Team_2 == "Arizona Cardinals"] <- "ARI"
career$Team_2[career$Team_2 == "Atlanta Falcons"] <- "ATL"
career$Team_2[career$Team_2 == "Baltimore Colts"] <- "BAL"
career$Team_2[career$Team_2 == "Baltimore Ravens"] <- "BAL"
career$Team_2[career$Team_2 == "Boston Patriots"] <- "BOS"
career$Team_2[career$Team_2 == "Buffalo Bills"] <- "BUF"
career$Team_2[career$Team_2 == "Carolina Panthers"] <- "CAR"
career$Team_2[career$Team_2 == "Chicago Bears"] <- "CHI"
career$Team_2[career$Team_2 == "Cincinnati Bengals"] <- "CIN"
career$Team_2[career$Team_2 == "Cleveland Browns"] <- "CLE"
career$Team_2[career$Team_2 == "Dallas Cowboys"] <- "DAL"
career$Team_2[career$Team_2 == "Dallas Texans"] <- "DAL"
career$Team_2[career$Team_2 == "Denver Broncos"] <- "DEN"
career$Team_2[career$Team_2 == "Detroit Lions"] <- "DET"
career$Team_2[career$Team_2 == "Green Bay Packers"] <- "GB"
career$Team_2[career$Team_2 == "Houston Texans"] <- "HOU"
career$Team_2[career$Team_2 == "Houston Oilers"] <- "HOU"
career$Team_2[career$Team_2 == "Indianapolis Colts"] <- "IND"
career$Team_2[career$Team_2 == "Jacksonville Jaguars"] <- "JAX"
career$Team_2[career$Team_2 == "Kansas City Chiefs"] <- "KC"
career$Team_2[career$Team_2 == "Miami Dolphins"] <- "MIA"
career$Team_2[career$Team_2 == "Minnesota Vikings"] <- "MIN"
career$Team_2[career$Team_2 == "New England Patriots"] <- "NE"
career$Team_2[career$Team_2 == "New Orleans Saints"] <- "NO"
career$Team_2[career$Team_2 == "New York Giants"] <- "NYG"
career$Team_2[career$Team_2 == "New York Jets"] <- "NYJ"
career$Team_2[career$Team_2 == "Oakland Raiders"] <- "OAK"
career$Team_2[career$Team_2 == "Philadelphia Eagles"] <- "PHI"
career$Team_2[career$Team_2 == "Phoenix Cardinals"] <- "PHO"
career$Team_2[career$Team_2 == "Pittsburgh Steelers"] <- "PIT"
career$Team_2[career$Team_2 == "Los Angeles Raiders"] <- "RAI"
career$Team_2[career$Team_2 == "Los Angeles Rams"] <- "RAM"
career$Team_2[career$Team_2 == "San Diego Chargers"] <- "SD"
career$Team_2[career$Team_2 == "Seattle Seahawks"] <- "SEA"
career$Team_2[career$Team_2 == "San Francisco 49ers"] <- "SF"
career$Team_2[career$Team_2 == "St. Louis Cardinals"] <- "STL"
career$Team_2[career$Team_2 == "St. Louis Rams"] <- "STL"
career$Team_2[career$Team_2 == "Tampa Bay Buccaneers"] <- "TB"
career$Team_2[career$Team_2 == "Tennessee Oilers"] <- "TEN"
career$Team_2[career$Team_2 == "Tennessee Titans"] <- "TEN"
career$Team_2[career$Team_2 == "Washington Redskins"] <- "WAS"
##Calculate average, standard deviation, and z-score of defensive strength
defense_data$avg <- sapply(seq_len(nrow(defense_data)), function(i) with(defense_data, mean(Yds[Year == Year[i]])))
defense_data$Standard_Deviation <- sapply(seq_len(nrow(defense_data)), function(i) with(defense_data, sd(Yds[Year == Year[i]])))
defense_data$Z_Score <-(defense_data$Yds - defense_data$avg)/defense_data$Standard_Deviation
##Convert to standard scale (1-5) across all season z-scores. So that it reflects if #1 team for one season is superior to #1 defense from prior season
def_z_min <- min(defense_data$Z_Score)
def_z_max <- max(defense_data$Z_Score)
def_z_range <- (def_z_max - def_z_min)
def_new_range <- 1 -5
defense_data$def_score <- (((defense_data$Z_Score - def_z_min)*def_new_range)/def_z_range)+5
##remove columns irrelevant for analysis
defense_data <- defense_data[ , -which(names(defense_data) %in% c("G", "Cmp", "Att", "Cmp%", "TD", "TD%", "Int", "Int%", "Y/A", "AY/A", "Y/C", "Y/G", "Rate", "Sk", "Yds__1", "NY/A", "ANY/A", "Sk%", "EXP"))]
##map team acronyms to team names so this can be joined to other datasets
defense_data$team_acr <- as.character(defense_data$Tm)
defense_data$team_acr[defense_data$team_acr == "Arizona Cardinals"] <- "ARI"
defense_data$team_acr[defense_data$team_acr == "Atlanta Falcons"] <- "ATL"
defense_data$team_acr[defense_data$team_acr == "Baltimore Colts"] <- "BAL"
defense_data$team_acr[defense_data$team_acr == "Baltimore Ravens"] <- "BAL"
defense_data$team_acr[defense_data$team_acr == "Boston Patriots"] <- "BOS"
defense_data$team_acr[defense_data$team_acr == "Buffalo Bills"] <- "BUF"
defense_data$team_acr[defense_data$team_acr == "Carolina Panthers"] <- "CAR"
defense_data$team_acr[defense_data$team_acr == "Chicago Bears"] <- "CHI"
defense_data$team_acr[defense_data$team_acr == "Cincinnati Bengals"] <- "CIN"
defense_data$team_acr[defense_data$team_acr == "Cleveland Browns"] <- "CLE"
defense_data$team_acr[defense_data$team_acr == "Dallas Cowboys"] <- "DAL"
defense_data$team_acr[defense_data$team_acr == "Dallas Texans"] <- "DAL"
defense_data$team_acr[defense_data$team_acr == "Denver Broncos"] <- "DEN"
defense_data$team_acr[defense_data$team_acr == "Detroit Lions"] <- "DET"
defense_data$team_acr[defense_data$team_acr == "Green Bay Packers"] <- "GB"
defense_data$team_acr[defense_data$team_acr == "Houston Texans"] <- "HOU"
defense_data$team_acr[defense_data$team_acr == "Houston Oilers"] <- "HOU"
defense_data$team_acr[defense_data$team_acr == "Indianapolis Colts"] <- "IND"
defense_data$team_acr[defense_data$team_acr == "Jacksonville Jaguars"] <- "JAX"
defense_data$team_acr[defense_data$team_acr == "Kansas City Chiefs"] <- "KC"
defense_data$team_acr[defense_data$team_acr == "Miami Dolphins"] <- "MIA"
defense_data$team_acr[defense_data$team_acr == "Minnesota Vikings"] <- "MIN"
defense_data$team_acr[defense_data$team_acr == "New England Patriots"] <- "NE"
defense_data$team_acr[defense_data$team_acr == "New Orleans Saints"] <- "NO"
defense_data$team_acr[defense_data$team_acr == "New York Giants"] <- "NYG"
defense_data$team_acr[defense_data$team_acr == "New York Jets"] <- "NYJ"
defense_data$team_acr[defense_data$team_acr == "Oakland Raiders"] <- "OAK"
defense_data$team_acr[defense_data$team_acr == "Philadelphia Eagles"] <- "PHI"
defense_data$team_acr[defense_data$team_acr == "Phoenix Cardinals"] <- "PHO"
defense_data$team_acr[defense_data$team_acr == "Pittsburgh Steelers"] <- "PIT"
defense_data$team_acr[defense_data$team_acr == "Los Angeles Raiders"] <- "RAI"
defense_data$team_acr[defense_data$team_acr == "Los Angeles Rams"] <- "RAM"
defense_data$team_acr[defense_data$team_acr == "San Diego Chargers"] <- "SD"
defense_data$team_acr[defense_data$team_acr == "Seattle Seahawks"] <- "SEA"
defense_data$team_acr[defense_data$team_acr == "San Francisco 49ers"] <- "SF"
defense_data$team_acr[defense_data$team_acr == "St. Louis Cardinals"] <- "STL"
defense_data$team_acr[defense_data$team_acr == "St. Louis Rams"] <- "STL"
defense_data$team_acr[defense_data$team_acr == "Tampa Bay Buccaneers"] <- "TB"
defense_data$team_acr[defense_data$team_acr == "Tennessee Oilers"] <- "TEN"
defense_data$team_acr[defense_data$team_acr == "Tennessee Titans"] <- "TEN"
defense_data$team_acr[defense_data$team_acr == "Washington Redskins"] <- "WAS"
################################
# join the career stats with the game logs
################################
#Note: The join actually added some rows. This is due to some QBs (<100 rows) that were traded mid-season, and have multiple rows for different teams in the same season
careerGameLogs <- merge(x=game_logs_played, y=career, by.x = c("Year","Name"), by.y = c("Year","Name"), all.x = TRUE)
##drop career stat columns that were irrelevent for analysis
careerGameLogs_2 <- subset(careerGameLogs, select=-c(Games.Played.y,Passes.Attempted.y,Passes.Completed.y,Passing.Yards.y,TD.Passes.y,Percentage.of.TDs.per.Attempts,Ints.y,Sacks.y,Sacked.Yards.Lost.y))
##Add Game_location field to the gamelog column, which will be used for joining to the weather dataset
careerGameLogs_2$game_location <- careerGameLogs_2$Team
#If a QB's game log is marked as an away game, then location = opponent team. If game log is home game for QB, location = QB team
careerGameLogs_2$game_location <- ifelse(careerGameLogs_2$Home.or.Away == "Away",as.character(careerGameLogs_2$Opponent),careerGameLogs_2$Team_2)
################################
##Merge weather and gamelogs dataset
################################
##inner join
weather_gamelogs_inner <- merge(x=weather_subset, y=careerGameLogs_2, by.x = c("date_2", "home_team_2"), by.y = c("Game.Date_2", "game_location") , by = NULL)
########clean up inner join file######################
##remove irrelevant columns
weather_gamelogs_inner_2 <- subset(weather_gamelogs_inner, select=-c(id, date, wind_chill, humidity, weather, dome, Player.Id.x, Position.x, Game.Date, Games.Played.x, Games.Started, Player.Id.y, Position.y))
#relabel column names so that they more clearly represent what they are
colnames(weather_gamelogs_inner_2) <- c("game_date", "game_location_acr", "home_team", "home_score", "away_team", "away_score", "temperature", "wind_mph", "humidity_pct", "year", "qb_name", "season", "week", "home.or.away", "opponent_acr", "outcome", "score", "game_passes_completed", "game_passes_attempted", "game_completion_pct", "game_passing_yards", "game_yards_per_attempt", "game_td_passes", "game_interceptions", "game_sacks", "game_sacked_yards_lost", "game_passer_rating", "game_rushing_attempts", "game_rushing_yards", "game_yards_per_carry", "game_rushing_td", "game_fumbles", "game_fumbles_lost", "qb_team", "season_completion_pct", "season_attempts_per_game", "season__yards_per_attmpt", "season_yards_per_game", "season_interecption_rate", "season_longest_pass", "season_passes_longer_20yards", "season_passes_longer_40yards", "season_passer_rating", "qb_team_acr")
#re-order colums
weather_gamelogs_inner_3 <- weather_gamelogs_inner_2[, c("qb_name", "qb_team", "qb_team_acr", "game_date", "week", "season", "opponent_acr", "home.or.away", "away_team", "game_location_acr", "home_team", "home_score", "away_score", "outcome", "score", "temperature", "wind_mph", "humidity_pct", "year", "game_passes_completed", "game_passes_attempted", "game_completion_pct", "game_passing_yards", "game_yards_per_attempt", "game_td_passes", "game_interceptions", "game_sacks", "game_sacked_yards_lost", "game_passer_rating", "game_rushing_attempts", "game_rushing_yards", "game_yards_per_carry", "game_rushing_td", "game_fumbles", "game_fumbles_lost", "season_completion_pct", "season_attempts_per_game", "season__yards_per_attmpt", "season_yards_per_game", "season_interecption_rate", "season_longest_pass", "season_passes_longer_20yards", "season_passes_longer_40yards", "season_passer_rating")]
#Add column that calculates deviation of a QB's passing yards per game compared to their yards/per game average within that same season
weather_gamelogs_inner_3$yards_dev <- as.numeric(as.character(weather_gamelogs_inner_3$game_passing_yards)) - as.numeric(as.character(weather_gamelogs_inner_3$season_yards_per_game))
# ##convert game completion percentage and season average completion percentage to numeric
# weather_gamelogs_inner_3$game_completion_pct <- as.numeric(as.character(weather_gamelogs_inner_3$game_completion_pct))
# weather_gamelogs_inner_3$season_completion_pct <- as.numeric(as.character(weather_gamelogs_inner_3$season_completion_pct))
#
# ##drop NA rows
# weather_gamelogs_inner_3 <- weather_gamelogs_inner_3[!is.na(weather_gamelogs_inner_3$game_completion_pct),]
# weather_gamelogs_inner_3 <- weather_gamelogs_inner_3[!is.na(weather_gamelogs_inner_3$season_completion_pct),]
# ###create column that shows calculates deviation in passing accuracy (% of successful pass completions) from game versus season average
# weather_gamelogs_inner_3$game_completion_pct_dev <- weather_gamelogs_inner_3$game_completion_pct - weather_gamelogs_inner_3$season_completion_pct
###merge defense dataset with other merged datasets
weather_gamelogs_def_inner <- merge(x=weather_gamelogs_inner_3, y=defense_data, by.x = c("year", "opponent_acr"), by.y = c("Year", "team_acr") , by = NULL)
##normalizing passing yards per game based on defensive strength
weather_gamelogs_def_inner$game_passing_yards_norm <- as.numeric(as.character(weather_gamelogs_def_inner$game_passing_yards))/as.numeric(as.character(weather_gamelogs_def_inner$Min_max_norm))
################################
# join the career stats with the game logs
################################
#Note: The join actually added some rows. This is due to some QBs (<100 rows) that were traded mid-season, and have multiple rows for different teams in the same season
careerGameLogs <- merge(x=game_logs_played, y=career, by.x = c("Year","Name"), by.y = c("Year","Name"), all.x = TRUE)
##drop career stat columns that were irrelevent for analysis
careerGameLogs_2 <- subset(careerGameLogs, select=-c(Games.Played.y,Passes.Attempted.y,Passes.Completed.y,Passing.Yards.y,TD.Passes.y,Percentage.of.TDs.per.Attempts,Ints.y,Sacks.y,Sacked.Yards.Lost.y))
##Add Game_location field to the gamelog column, which will be used for joining to the weather dataset
careerGameLogs_2$game_location <- careerGameLogs_2$Team
#If a QB's game log is marked as an away game, then location = opponent team. If game log is home game for QB, location = QB team
careerGameLogs_2$game_location <- ifelse(careerGameLogs_2$Home.or.Away == "Away",as.character(careerGameLogs_2$Opponent),careerGameLogs_2$Team_2)
################################
##Merge weather and gamelogs dataset
################################
##inner join
weather_gamelogs_inner <- merge(x=weather_subset, y=careerGameLogs_2, by.x = c("date_2", "home_team_2"), by.y = c("Game.Date_2", "game_location") , by = NULL)
########clean up inner join file######################
##remove irrelevant columns
weather_gamelogs_inner_2 <- subset(weather_gamelogs_inner, select=-c(id, date, wind_chill, humidity, weather, dome, Player.Id.x, Position.x, Game.Date, Games.Played.x, Games.Started, Player.Id.y, Position.y))
#relabel column names so that they more clearly represent what they are
colnames(weather_gamelogs_inner_2) <- c("game_date", "game_location_acr", "home_team", "home_score", "away_team", "away_score", "temperature", "wind_mph", "humidity_pct", "year", "qb_name", "season", "week", "home.or.away", "opponent_acr", "outcome", "score", "game_passes_completed", "game_passes_attempted", "game_completion_pct", "game_passing_yards", "game_yards_per_attempt", "game_td_passes", "game_interceptions", "game_sacks", "game_sacked_yards_lost", "game_passer_rating", "game_rushing_attempts", "game_rushing_yards", "game_yards_per_carry", "game_rushing_td", "game_fumbles", "game_fumbles_lost", "qb_team", "season_completion_pct", "season_attempts_per_game", "season__yards_per_attmpt", "season_yards_per_game", "season_interecption_rate", "season_longest_pass", "season_passes_longer_20yards", "season_passes_longer_40yards", "season_passer_rating", "qb_team_acr")
#re-order colums
weather_gamelogs_inner_3 <- weather_gamelogs_inner_2[, c("qb_name", "qb_team", "qb_team_acr", "game_date", "week", "season", "opponent_acr", "home.or.away", "away_team", "game_location_acr", "home_team", "home_score", "away_score", "outcome", "score", "temperature", "wind_mph", "humidity_pct", "year", "game_passes_completed", "game_passes_attempted", "game_completion_pct", "game_passing_yards", "game_yards_per_attempt", "game_td_passes", "game_interceptions", "game_sacks", "game_sacked_yards_lost", "game_passer_rating", "game_rushing_attempts", "game_rushing_yards", "game_yards_per_carry", "game_rushing_td", "game_fumbles", "game_fumbles_lost", "season_completion_pct", "season_attempts_per_game", "season__yards_per_attmpt", "season_yards_per_game", "season_interecption_rate", "season_longest_pass", "season_passes_longer_20yards", "season_passes_longer_40yards", "season_passer_rating")]
#Add column that calculates deviation of a QB's passing yards per game compared to their yards/per game average within that same season
weather_gamelogs_inner_3$yards_dev <- as.numeric(as.character(weather_gamelogs_inner_3$game_passing_yards)) - as.numeric(as.character(weather_gamelogs_inner_3$season_yards_per_game))
# ##convert game completion percentage and season average completion percentage to numeric
# weather_gamelogs_inner_3$game_completion_pct <- as.numeric(as.character(weather_gamelogs_inner_3$game_completion_pct))
# weather_gamelogs_inner_3$season_completion_pct <- as.numeric(as.character(weather_gamelogs_inner_3$season_completion_pct))
#
# ##drop NA rows
# weather_gamelogs_inner_3 <- weather_gamelogs_inner_3[!is.na(weather_gamelogs_inner_3$game_completion_pct),]
# weather_gamelogs_inner_3 <- weather_gamelogs_inner_3[!is.na(weather_gamelogs_inner_3$season_completion_pct),]
# ###create column that shows calculates deviation in passing accuracy (% of successful pass completions) from game versus season average
# weather_gamelogs_inner_3$game_completion_pct_dev <- weather_gamelogs_inner_3$game_completion_pct - weather_gamelogs_inner_3$season_completion_pct
###merge defense dataset with other merged datasets
weather_gamelogs_def_inner <- merge(x=weather_gamelogs_inner_3, y=defense_data, by.x = c("year", "opponent_acr"), by.y = c("Year", "team_acr") , by = NULL)
##normalizing passing yards per game based on defensive strength
weather_gamelogs_def_inner$game_passing_yards_norm<-as.numeric(as.character(weather_gamelogs_def_inner$game_passing_yards))/as.numeric(as.character(weather_gamelogs_def_inner$Min_max_norm))
View(weather_gamelogs_def_inner)
View(defense_data)
################################
# join the career stats with the game logs
################################
#Note: The join actually added some rows. This is due to some QBs (<100 rows) that were traded mid-season, and have multiple rows for different teams in the same season
careerGameLogs <- merge(x=game_logs_played, y=career, by.x = c("Year","Name"), by.y = c("Year","Name"), all.x = TRUE)
##drop career stat columns that were irrelevent for analysis
careerGameLogs_2 <- subset(careerGameLogs, select=-c(Games.Played.y,Passes.Attempted.y,Passes.Completed.y,Passing.Yards.y,TD.Passes.y,Percentage.of.TDs.per.Attempts,Ints.y,Sacks.y,Sacked.Yards.Lost.y))
##Add Game_location field to the gamelog column, which will be used for joining to the weather dataset
careerGameLogs_2$game_location <- careerGameLogs_2$Team
#If a QB's game log is marked as an away game, then location = opponent team. If game log is home game for QB, location = QB team
careerGameLogs_2$game_location <- ifelse(careerGameLogs_2$Home.or.Away == "Away",as.character(careerGameLogs_2$Opponent),careerGameLogs_2$Team_2)
################################
##Merge weather and gamelogs dataset
################################
##inner join
weather_gamelogs_inner <- merge(x=weather_subset, y=careerGameLogs_2, by.x = c("date_2", "home_team_2"), by.y = c("Game.Date_2", "game_location") , by = NULL)
########clean up inner join file######################
##remove irrelevant columns
weather_gamelogs_inner_2 <- subset(weather_gamelogs_inner, select=-c(id, date, wind_chill, humidity, weather, dome, Player.Id.x, Position.x, Game.Date, Games.Played.x, Games.Started, Player.Id.y, Position.y))
#relabel column names so that they more clearly represent what they are
colnames(weather_gamelogs_inner_2) <- c("game_date", "game_location_acr", "home_team", "home_score", "away_team", "away_score", "temperature", "wind_mph", "humidity_pct", "year", "qb_name", "season", "week", "home.or.away", "opponent_acr", "outcome", "score", "game_passes_completed", "game_passes_attempted", "game_completion_pct", "game_passing_yards", "game_yards_per_attempt", "game_td_passes", "game_interceptions", "game_sacks", "game_sacked_yards_lost", "game_passer_rating", "game_rushing_attempts", "game_rushing_yards", "game_yards_per_carry", "game_rushing_td", "game_fumbles", "game_fumbles_lost", "qb_team", "season_completion_pct", "season_attempts_per_game", "season__yards_per_attmpt", "season_yards_per_game", "season_interecption_rate", "season_longest_pass", "season_passes_longer_20yards", "season_passes_longer_40yards", "season_passer_rating", "qb_team_acr")
#re-order colums
weather_gamelogs_inner_3 <- weather_gamelogs_inner_2[, c("qb_name", "qb_team", "qb_team_acr", "game_date", "week", "season", "opponent_acr", "home.or.away", "away_team", "game_location_acr", "home_team", "home_score", "away_score", "outcome", "score", "temperature", "wind_mph", "humidity_pct", "year", "game_passes_completed", "game_passes_attempted", "game_completion_pct", "game_passing_yards", "game_yards_per_attempt", "game_td_passes", "game_interceptions", "game_sacks", "game_sacked_yards_lost", "game_passer_rating", "game_rushing_attempts", "game_rushing_yards", "game_yards_per_carry", "game_rushing_td", "game_fumbles", "game_fumbles_lost", "season_completion_pct", "season_attempts_per_game", "season__yards_per_attmpt", "season_yards_per_game", "season_interecption_rate", "season_longest_pass", "season_passes_longer_20yards", "season_passes_longer_40yards", "season_passer_rating")]
#Add column that calculates deviation of a QB's passing yards per game compared to their yards/per game average within that same season
weather_gamelogs_inner_3$yards_dev <- as.numeric(as.character(weather_gamelogs_inner_3$game_passing_yards)) - as.numeric(as.character(weather_gamelogs_inner_3$season_yards_per_game))
# ##convert game completion percentage and season average completion percentage to numeric
# weather_gamelogs_inner_3$game_completion_pct <- as.numeric(as.character(weather_gamelogs_inner_3$game_completion_pct))
# weather_gamelogs_inner_3$season_completion_pct <- as.numeric(as.character(weather_gamelogs_inner_3$season_completion_pct))
#
# ##drop NA rows
# weather_gamelogs_inner_3 <- weather_gamelogs_inner_3[!is.na(weather_gamelogs_inner_3$game_completion_pct),]
# weather_gamelogs_inner_3 <- weather_gamelogs_inner_3[!is.na(weather_gamelogs_inner_3$season_completion_pct),]
# ###create column that shows calculates deviation in passing accuracy (% of successful pass completions) from game versus season average
# weather_gamelogs_inner_3$game_completion_pct_dev <- weather_gamelogs_inner_3$game_completion_pct - weather_gamelogs_inner_3$season_completion_pct
###merge defense dataset with other merged datasets
weather_gamelogs_def_inner <- merge(x=weather_gamelogs_inner_3, y=defense_data, by.x = c("year", "opponent_acr"), by.y = c("Year", "team_acr") , by = NULL)
# ##normalizing passing yards per game based on defensive strength
# weather_gamelogs_def_inner$game_passing_yards_norm<-as.numeric(as.character(weather_gamelogs_def_inner$game_passing_yards))/as.numeric(as.character(weather_gamelogs_def_inner$Min_max_norm))
# #derive yards deviation from season average, with normalized game passing yards
# weather_gamelogs_def_inner$yards_dev_norm <- as.numeric(as.character(weather_gamelogs_def_inner$game_passing_yards_norm)) - as.numeric(as.character(weather_gamelogs_def_inner$season_yards_per_game))
#
#
#
# ##drop rows with NA humidity
# weather_gamelogs_def_inner <- weather_gamelogs_def_inner[!is.na(weather_gamelogs_def_inner$humidity_pct),]
#
# ##drop rows with NA yards deviation
# weather_gamelogs_def_inner <- weather_gamelogs_def_inner[!is.na(weather_gamelogs_def_inner$yards_dev),]
###filter dataset on only regular season games. Exclude playoffs and preseason
weather_gamelogs_def_inner <- filter(weather_gamelogs_def_inner, weather_gamelogs_def_inner$season == "Regular Season")
######################################
#binning (Equal Depth)
#####################################
#####################Game performance (passing yards) binning
##number of rows
nrows <- nrow(weather_gamelogs_def_inner)
#depth for each of the 8 bins
depth_yards_dev <- round(nrows/5)
##sort dataframe based on yards_dev, ascending
bindata_sort_yards_dev <- weather_gamelogs_def_inner[order(weather_gamelogs_def_inner$yards_dev),]
##create new column that will be used to categorize yards_dev
bindata_sort_yards_dev$performance <- "Placeholder"
#determine column index value of this column
index_cat_yards_dev <- grep("performance", colnames(bindata_sort_yards_dev))
##assign categories based on index values in sorted dataframe
bindata_sort_yards_dev[1:depth_yards_dev,index_cat_yards_dev] <- "really bad game"
bindata_sort_yards_dev[(depth_yards_dev+1):(depth_yards_dev*2),index_cat_yards_dev] <- "bad game"
bindata_sort_yards_dev[(depth_yards_dev*2+1):(depth_yards_dev*3),index_cat_yards_dev] <- "average game"
bindata_sort_yards_dev[(depth_yards_dev*3+1):(depth_yards_dev*4),index_cat_yards_dev] <- "good game"
bindata_sort_yards_dev[(depth_yards_dev*4+1):nrows,index_cat_yards_dev] <- "really good game"
testing_data_ed_5 <- bindata_sort_yards_dev[ , which(names(bindata_sort_yards_dev) %in% c("temperature", "wind_mph", "humidity_pct", "def_score", "performance"))]
testing_data_ed_5$performance <- as.factor(testing_data_ed_5$performance)
testing_data_ed_5$temperature <- as.numeric(testing_data_ed_5$temperature)
testing_data_ed_5 <- testing_data_ed_5[c("temperature", "humidity_pct", "wind_mph", "def_score","performance")]
dataset <- na.omit(testing_data_ed_5)
# lapply(dataset, function(x) any(is.na(x)))
dataset <- dataset[c("def_score", "performance")]
# create a list of 80% of the rows in the original dataset we can use for training
validation_index <- createDataPartition(dataset$yards_dev_cat, p=0.80, list=FALSE)
# select 20% of the data for validation
validation <- dataset[-validation_index,]
# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]
# dimensions of dataset
dim(dataset)
# list types for each attribute
sapply(dataset, class)
# list the levels for the class
levels(dataset$performance)
dataset$performance<-factor(dataset$performance, levels=c("really bad game", "bad game", "average game", "good game", "really good game"))
# summarize the class distribution
percentage <- prop.table(table(dataset$performance)) * 100
cbind(freq=table(dataset$performance), percentage=percentage)
# summarize attribute distributions
summary(dataset)
# split input and output
x <- dataset[,1:4]
y <- dataset[,5]
# boxplot for each attribute on one image
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(x[,i], main=names(dataset)[i])
}
# barplot for class breakdown
plot(y)
# scatterplot matrix
featurePlot(x=x, y=y, plot="ellipse")
# box and whisker plots for each attribute
featurePlot(x=x, y=y, plot="box")
# box and whisker plots for each attribute
featurePlot(x=dataset$wind_mph, y=y, plot="box")
# density plots for each attribute by class value
scales <- list(x=list(relation="free"), y=list(relation="free"))
featurePlot(x=x, y=y, plot="density", scales=scales)
# Run algorithms using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
?train
# a) linear algorithms
set.seed(7)
fit.lda <- train(performance~., data=dataset, method="lda", metric=metric, trControl=control, na.action = na.omit)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(performance~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(performance~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(performance~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(performance~., data=dataset, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
# compare accuracy of models
dotplot(results)
# summarize Best Model
print(fit.lda)
# estimate skill of LDA on the validation dataset
predictions <- predict(fit.lda, validation)
confusionMatrix(predictions, validation$Species)
library(stats)
dataset <- na.omit(testing_data_ed_5)
# lapply(dataset, function(x) any(is.na(x)))
dataset <- dataset[c("def_score", "performance")]
# create a list of 80% of the rows in the original dataset we can use for training
validation_index <- createDataPartition(dataset$yards_dev_cat, p=0.80, list=FALSE)
# select 20% of the data for validation
validation <- dataset[-validation_index,]
# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]
# dimensions of dataset
dim(dataset)
# list types for each attribute
sapply(dataset, class)
# list the levels for the class
levels(dataset$performance)
dataset$performance<-factor(dataset$performance, levels=c("really bad game", "bad game", "average game", "good game", "really good game"))
# summarize the class distribution
percentage <- prop.table(table(dataset$performance)) * 100
cbind(freq=table(dataset$performance), percentage=percentage)
# summarize attribute distributions
summary(dataset)
# split input and output
x <- dataset[,1:4]
y <- dataset[,5]
# boxplot for each attribute on one image
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(x[,i], main=names(dataset)[i])
}
# barplot for class breakdown
plot(y)
# scatterplot matrix
featurePlot(x=x, y=y, plot="ellipse")
# box and whisker plots for each attribute
featurePlot(x=x, y=y, plot="box")
# box and whisker plots for each attribute
featurePlot(x=dataset$wind_mph, y=y, plot="box")
# density plots for each attribute by class value
scales <- list(x=list(relation="free"), y=list(relation="free"))
featurePlot(x=x, y=y, plot="density", scales=scales)
# Run algorithms using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
?train
# a) linear algorithms
set.seed(7)
fit.lda <- train(performance~., data=dataset, method="lda", metric=metric, trControl=control, na.action = na.omit)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(performance~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(performance~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(performance~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(performance~., data=dataset, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
# compare accuracy of models
dotplot(results)
# summarize Best Model
print(fit.lda)
# estimate skill of LDA on the validation dataset
predictions <- predict(fit.lda, validation)
confusionMatrix(predictions, validation$Species)
View(dataset)
library(caret)
dataset <- na.omit(testing_data_ed_5)
# lapply(dataset, function(x) any(is.na(x)))
dataset <- dataset[c("def_score", "performance")]
# create a list of 80% of the rows in the original dataset we can use for training
validation_index <- createDataPartition(dataset$yards_dev_cat, p=0.80, list=FALSE)
# select 20% of the data for validation
validation <- dataset[-validation_index,]
# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]
View(testing_data_ed_5)
dataset <- dataset[c("def_score", "performance")]
# create a list of 80% of the rows in the original dataset we can use for training
validation_index <- createDataPartition(dataset$performance, p=0.80, list=FALSE)
# select 20% of the data for validation
validation <- dataset[-validation_index,]
# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]
# dimensions of dataset
dim(dataset)
# list types for each attribute
sapply(dataset, class)
# list the levels for the class
levels(dataset$performance)
dataset$performance<-factor(dataset$performance, levels=c("really bad game", "bad game", "average game", "good game", "really good game"))
# summarize the class distribution
percentage <- prop.table(table(dataset$performance)) * 100
cbind(freq=table(dataset$performance), percentage=percentage)
# summarize attribute distributions
summary(dataset)
# split input and output
x <- dataset[,1:4]
y <- dataset[,5]
# boxplot for each attribute on one image
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(x[,i], main=names(dataset)[i])
}
# barplot for class breakdown
plot(y)
summary(dataset)
library(caret)
dataset <- na.omit(testing_data_ed_5)
# lapply(dataset, function(x) any(is.na(x)))
# dataset <- dataset[c("def_score", "performance")]
# create a list of 80% of the rows in the original dataset we can use for training
validation_index <- createDataPartition(dataset$performance, p=0.80, list=FALSE)
# select 20% of the data for validation
validation <- dataset[-validation_index,]
# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]
# dimensions of dataset
dim(dataset)
# list types for each attribute
sapply(dataset, class)
# list the levels for the class
levels(dataset$performance)
dataset$performance<-factor(dataset$performance, levels=c("really bad game", "bad game", "average game", "good game", "really good game"))
# summarize the class distribution
percentage <- prop.table(table(dataset$performance)) * 100
cbind(freq=table(dataset$performance), percentage=percentage)
# summarize attribute distributions
summary(dataset)
# split input and output
x <- dataset[,1:4]
y <- dataset[,5]
# boxplot for each attribute on one image
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(x[,i], main=names(dataset)[i])
}
# barplot for class breakdown
plot(y)
# scatterplot matrix
featurePlot(x=x, y=y, plot="ellipse")
# scatterplot matrix
featurePlot(x=x, y=y, plot="ellipse")
# box and whisker plots for each attribute
featurePlot(x=x, y=y, plot="box")
# box and whisker plots for each attribute
featurePlot(x=dataset$wind_mph, y=y, plot="box")
# density plots for each attribute by class value
scales <- list(x=list(relation="free"), y=list(relation="free"))
featurePlot(x=x, y=y, plot="density", scales=scales)
# Run algorithms using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
?train
# a) linear algorithms
set.seed(7)
fit.lda <- train(performance~., data=dataset, method="lda", metric=metric, trControl=control, na.action = na.omit)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(performance~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(performance~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(performance~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(performance~., data=dataset, method="rf", metric=metric, trControl=control)
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
# compare accuracy of models
dotplot(results)
print(fit.lda)
# estimate skill of LDA on the validation dataset
predictions <- predict(fit.lda, validation)
confusionMatrix(predictions, validation$Species)
